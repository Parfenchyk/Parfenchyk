# Реализуйте рекурсивную функцию нарезания прямоугольника с заданными пользователем
# сторонами a и b на квадраты с наибольшей возможной на каждом этапе стороной.
# Выведите длины ребер получаемых квадратов и кол-во полученных квадратов.

# Объяснение:
#
# Проблема решена за помощи итератора - рекурсивная функция def to_quadrats()
# при каждом запросе о последующее значение выдает его командой
# yield i (и затем приостановится и ждёт на последующий запрос).
#
# Сам запрос о последующее и последующее значения итератора (пока он не исчерпается)
# реализуется функцией list().
#
# В цикле
## for i in range(area, 0, -1):
# мы ищем самое большое значение (сторону квадрата),
# для которого его вторая степень (площадь квадрата) ещё не превышает текущую площадь -
# да, вместо area бы лучше было взять его квадратный корень.
#
# После нахождения такого значения текущая площадь соответственно уменьшится,
# самое значение выдастся командой yield и цикл for прекращается командой break.
# Yield — это ключевое слово в Python, которое используется для возврата из функции
# с сохранением состояния ее локальных переменных, и при повторном вызове такой
# функции выполнение продолжается с оператора yield, на котором ее работа была прервана.
# Любая функция, содержащая ключевое слово yield, называется генератором.

length = int(input("Введите длину прямоугольника:  "))
width = int(input("Введите ширину прямоугольника: "))

area = length * width


def to_quadrats(area):
    if area == 0:
        raise StopIteration
    while (area):
        for i in range(area, 0, -1):
            if i * i <= area:
                area -= i * i
                yield i
                break
        to_quadrats(area)


result = list(to_quadrats(area))
print("Длины ребёр получаемых квадратов: ", result)
print("Количество полученных квадратов: ", len(result))
